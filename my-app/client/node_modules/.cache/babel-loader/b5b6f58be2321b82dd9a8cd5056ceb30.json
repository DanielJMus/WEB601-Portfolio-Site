{"ast":null,"code":"export const LOGIN_PENDING = 'LOGIN_PENDING';\nexport const LOGIN_SUCCESS = 'LOGIN_SUCCESS';\nexport const LOGIN_ERROR = 'LOGIN_ERROR';\nexport const SET_ADMIN = 'SET_ADMIN'; // Whether the site is waiting for the user to try logging in\n\nexport function setLoginPending(isLoginPending) {\n  return {\n    type: LOGIN_PENDING,\n    isLoginPending\n  };\n} // Whether the user is successfully logged into their account\n\nexport function setLoginSuccess(isLoginSuccess) {\n  return {\n    type: LOGIN_SUCCESS,\n    isLoginSuccess\n  };\n} // Any errors that occur when logging into an account\n\nexport function setLoginError(isLoginError) {\n  return {\n    type: LOGIN_ERROR,\n    isLoginError\n  };\n} // Whether or not the user is an administrator (And has access to the Admin panel)\n\nexport function setIsAdministrator(isAdministrator) {\n  return {\n    type: SET_ADMIN,\n    isAdministrator\n  };\n}\nexport function login(username, password) {\n  return dispatch => {\n    dispatch(setLoginPending(true));\n    dispatch(setLoginSuccess(false));\n    dispatch(setLoginError(false));\n    dispatch(setIsAdministrator(false));\n    sendLoginRequest(username, password).then(success => {\n      dispatch(setLoginPending(false));\n      dispatch(setLoginSuccess(true));\n\n      if (success === true) {\n        dispatch(setIsAdministrator(true));\n      }\n    }).catch(error => {\n      dispatch(setLoginPending(false));\n      dispatch(setLoginError(error));\n    });\n  };\n}\nexport function logout() {\n  return dispatch => {\n    dispatch(setLoginPending(true));\n    dispatch(setLoginSuccess(false));\n    dispatch(setLoginError(false));\n    dispatch(setIsAdministrator(false));\n  };\n}\n/* Handles login credential checking for user, checks their email and password within\r\nthe user database and returns whether the login was successful or not. */\n\nfunction sendLoginRequest(email, password) {\n  return new Promise((resolve, reject) => {\n    fetch('http://localhost:4200/api/users/' + email, {\n      method: 'get'\n    }).then(res => res.json().then(json => {\n      if (json.length > 0) {\n        if (json[0].Password === password) {\n          return resolve(json[0].Admin === 1);\n        }\n      }\n\n      return reject(new Error(\"Invalid username or password\"));\n    }));\n  });\n}","map":{"version":3,"sources":["D:\\Documents\\NMIT\\WEB601\\WEB601-Portfolio-Site\\my-app\\client\\src\\Actions\\action.js"],"names":["LOGIN_PENDING","LOGIN_SUCCESS","LOGIN_ERROR","SET_ADMIN","setLoginPending","isLoginPending","type","setLoginSuccess","isLoginSuccess","setLoginError","isLoginError","setIsAdministrator","isAdministrator","login","username","password","dispatch","sendLoginRequest","then","success","catch","error","logout","email","Promise","resolve","reject","fetch","method","res","json","length","Password","Admin","Error"],"mappings":"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","sourcesContent":["export const LOGIN_PENDING = 'LOGIN_PENDING';\r\nexport const LOGIN_SUCCESS = 'LOGIN_SUCCESS';\r\nexport const LOGIN_ERROR = 'LOGIN_ERROR';\r\nexport const SET_ADMIN = 'SET_ADMIN';\r\n\r\n// Whether the site is waiting for the user to try logging in\r\nexport function setLoginPending(isLoginPending) {\r\n    return {\r\n        type: LOGIN_PENDING,\r\n        isLoginPending\r\n    };\r\n}\r\n\r\n// Whether the user is successfully logged into their account\r\nexport function setLoginSuccess (isLoginSuccess) {\r\n    return {\r\n        type: LOGIN_SUCCESS,\r\n        isLoginSuccess\r\n    };\r\n}\r\n\r\n// Any errors that occur when logging into an account\r\nexport function setLoginError (isLoginError) {\r\n    return {\r\n        type: LOGIN_ERROR,\r\n        isLoginError\r\n    };\r\n}\r\n\r\n// Whether or not the user is an administrator (And has access to the Admin panel)\r\nexport function setIsAdministrator (isAdministrator) {\r\n    return {\r\n        type: SET_ADMIN,\r\n        isAdministrator\r\n    };\r\n}\r\n\r\nexport function login(username, password) {\r\n    return dispatch => {\r\n        dispatch(setLoginPending(true));\r\n        dispatch(setLoginSuccess(false));\r\n        dispatch(setLoginError(false));\r\n        dispatch(setIsAdministrator(false));\r\n\r\n        sendLoginRequest(username, password)\r\n            .then(success => {\r\n                dispatch(setLoginPending(false));\r\n                dispatch(setLoginSuccess(true));\r\n                if(success === true) {\r\n                    dispatch(setIsAdministrator(true));\r\n                }\r\n            })\r\n            .catch(error => {\r\n                dispatch(setLoginPending(false));\r\n                dispatch(setLoginError(error));\r\n            })\r\n    }\r\n}\r\n\r\nexport function logout() {\r\n    return dispatch => {\r\n        dispatch(setLoginPending(true));\r\n        dispatch(setLoginSuccess(false));\r\n        dispatch(setLoginError(false));\r\n        dispatch(setIsAdministrator(false));\r\n    }\r\n}\r\n\r\n/* Handles login credential checking for user, checks their email and password within\r\nthe user database and returns whether the login was successful or not. */\r\nfunction sendLoginRequest (email, password) {\r\n    return new Promise((resolve, reject) => {\r\n        fetch('http://localhost:4200/api/users/' + email, {\r\n            method: 'get'\r\n        }).then(res =>\r\n            res.json().then(json => {\r\n                if(json.length > 0) {\r\n                    if(json[0].Password === password) {\r\n                        return resolve(json[0].Admin === 1);\r\n                    }\r\n                }\r\n                return reject(new Error(\"Invalid username or password\"));\r\n            })\r\n        );\r\n    });\r\n}"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _defineProperty from \"D:\\\\Documents\\\\NMIT\\\\WEB601\\\\WEB601-Portfolio-Site\\\\my-app\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { LOGIN_PENDING, LOGIN_SUCCESS, LOGIN_ERROR } from '../Actions/index';\nexport default function reducer(state = {\n  isLoginPending: false,\n  isLoginSuccess: false,\n  isLoginError: null\n}, action) {\n  switch (action.type) {\n    case LOGIN_SUCCESS:\n      return _objectSpread({}, state, {\n        isLoginSuccess: action.isLoginSuccess\n      });\n\n    case LOGIN_PENDING:\n      return _objectSpread({}, state, {\n        isLoginPending: action.isLoginPending\n      });\n\n    case LOGIN_ERROR:\n      return _objectSpread({}, state, {\n        isLoginError: action.isLoginError\n      });\n\n    default:\n      return state;\n  }\n}\n/* Handles login credential checking for user, checks their email and password within\r\nthe user database and returns whether the login was successful or not. */\n\nfunction sendLoginRequest(email, password) {\n  return new Promise((resolve, reject) => {\n    fetch('http://localhost:4200/api/users/' + email, {\n      method: 'get'\n    }).then(res => res.json().then(json => {\n      if (json.length > 0) {\n        if (json[0].Password === password) {\n          return resolve(true);\n        }\n      }\n\n      return reject(new Error(\"Invalid username or password\"));\n    }));\n  });\n}","map":{"version":3,"sources":["D:\\Documents\\NMIT\\WEB601\\WEB601-Portfolio-Site\\my-app\\client\\src\\Reducers\\reducer.js"],"names":["LOGIN_PENDING","LOGIN_SUCCESS","LOGIN_ERROR","reducer","state","isLoginPending","isLoginSuccess","isLoginError","action","type","sendLoginRequest","email","password","Promise","resolve","reject","fetch","method","then","res","json","length","Password","Error"],"mappings":";;;;;;AAAA,SAASA,aAAT,EAAwBC,aAAxB,EAAuCC,WAAvC,QAA0D,kBAA1D;AAEA,eAAe,SAASC,OAAT,CAAiBC,KAAK,GAAG;AACpCC,EAAAA,cAAc,EAAE,KADoB;AAEpCC,EAAAA,cAAc,EAAE,KAFoB;AAGpCC,EAAAA,YAAY,EAAE;AAHsB,CAAzB,EAIZC,MAJY,EAIJ;AACP,UAAOA,MAAM,CAACC,IAAd;AACI,SAAKR,aAAL;AACI,+BACOG,KADP;AAEIE,QAAAA,cAAc,EAAEE,MAAM,CAACF;AAF3B;;AAKJ,SAAKN,aAAL;AACI,+BACOI,KADP;AAEIC,QAAAA,cAAc,EAAEG,MAAM,CAACH;AAF3B;;AAKJ,SAAKH,WAAL;AACI,+BACOE,KADP;AAEIG,QAAAA,YAAY,EAAEC,MAAM,CAACD;AAFzB;;AAKJ;AACI,aAAOH,KAAP;AApBR;AAsBH;AAED;;;AAEA,SAASM,gBAAT,CAA2BC,KAA3B,EAAkCC,QAAlC,EAA4C;AACxC,SAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACpCC,IAAAA,KAAK,CAAC,qCAAqCL,KAAtC,EAA6C;AAC9CM,MAAAA,MAAM,EAAE;AADsC,KAA7C,CAAL,CAEGC,IAFH,CAEQC,GAAG,IACPA,GAAG,CAACC,IAAJ,GAAWF,IAAX,CAAgBE,IAAI,IAAI;AACpB,UAAGA,IAAI,CAACC,MAAL,GAAc,CAAjB,EAAoB;AAChB,YAAGD,IAAI,CAAC,CAAD,CAAJ,CAAQE,QAAR,KAAqBV,QAAxB,EAAkC;AAC9B,iBAAOE,OAAO,CAAC,IAAD,CAAd;AACH;AACJ;;AACD,aAAOC,MAAM,CAAC,IAAIQ,KAAJ,CAAU,8BAAV,CAAD,CAAb;AACH,KAPD,CAHJ;AAYH,GAbM,CAAP;AAcH","sourcesContent":["import { LOGIN_PENDING, LOGIN_SUCCESS, LOGIN_ERROR } from '../Actions/index';\r\n\r\nexport default function reducer(state = {\r\n    isLoginPending: false,\r\n    isLoginSuccess: false,\r\n    isLoginError: null\r\n}, action) {\r\n    switch(action.type) {\r\n        case LOGIN_SUCCESS:\r\n            return {\r\n                ...state,\r\n                isLoginSuccess: action.isLoginSuccess\r\n            };\r\n\r\n        case LOGIN_PENDING:\r\n            return {\r\n                ...state,\r\n                isLoginPending: action.isLoginPending\r\n            };\r\n\r\n        case LOGIN_ERROR:\r\n            return {\r\n                ...state,\r\n                isLoginError: action.isLoginError\r\n            };\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n/* Handles login credential checking for user, checks their email and password within\r\nthe user database and returns whether the login was successful or not. */\r\nfunction sendLoginRequest (email, password) {\r\n    return new Promise((resolve, reject) => {\r\n        fetch('http://localhost:4200/api/users/' + email, {\r\n            method: 'get'\r\n        }).then(res =>\r\n            res.json().then(json => {\r\n                if(json.length > 0) {\r\n                    if(json[0].Password === password) {\r\n                        return resolve(true);\r\n                    }\r\n                }\r\n                return reject(new Error(\"Invalid username or password\"));\r\n            })\r\n        );\r\n    });\r\n}"]},"metadata":{},"sourceType":"module"}
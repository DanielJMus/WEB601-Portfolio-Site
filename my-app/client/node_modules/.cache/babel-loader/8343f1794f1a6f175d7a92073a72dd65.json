{"ast":null,"code":"const LOGIN_PENDING = 'LOGIN_PENDING';\nconst LOGIN_SUCCESS = 'LOGIN_SUCCESS';\nconst LOGIN_ERROR = 'LOGIN_ERROR';\n\nfunction setLoginPending(isLoginPending) {\n  return {\n    type: LOGIN_PENDING,\n    isLoginPending\n  };\n}\n\nfunction SetLoginSuccess(isLoginSuccess) {\n  return {\n    type: LOGIN_SUCCESS,\n    isLoginSuccess\n  };\n}\n\nfunction SetLoginError(isLoginError) {\n  return {\n    type: LOGIN_ERROR,\n    isLoginError\n  };\n}\n\nexport function login(username, password) {\n  return dispatch => {\n    dispatch(setLoginPending(true));\n    dispatch(setLoginSuccess(false));\n    dispatch(setLoginError(false));\n    sendLoginRequest(username, password).then(success => {\n      dispatch(setLoginPending(false));\n      dispatch(setLoginSuccess(true));\n    }).catch(error => {\n      dispatch(setLoginPending(false));\n      dispatch(setLoginError(error));\n    });\n  };\n}\n/* Handles login credential checking for user, checks their email and password within\r\nthe user database and returns whether the login was successful or not. */\n\nfunction sendLoginRequest(email, password) {\n  return new Promise((resolve, reject) => {\n    fetch('http://localhost:4200/api/users/' + email, {\n      method: 'get'\n    }).then(res => res.json().then(json => {\n      if (json.length > 0) {\n        if (json[0].Password === password) {\n          return resolve(true);\n        }\n      }\n\n      return reject(new Error(\"Invalid username or password\"));\n    }));\n  });\n}","map":{"version":3,"sources":["D:\\Documents\\NMIT\\WEB601\\WEB601-Portfolio-Site\\my-app\\client\\src\\Actions\\index.js"],"names":["LOGIN_PENDING","LOGIN_SUCCESS","LOGIN_ERROR","setLoginPending","isLoginPending","type","SetLoginSuccess","isLoginSuccess","SetLoginError","isLoginError","login","username","password","dispatch","setLoginSuccess","setLoginError","sendLoginRequest","then","success","catch","error","email","Promise","resolve","reject","fetch","method","res","json","length","Password","Error"],"mappings":"AAAA,MAAMA,aAAa,GAAG,eAAtB;AACA,MAAMC,aAAa,GAAG,eAAtB;AACA,MAAMC,WAAW,GAAG,aAApB;;AAEA,SAASC,eAAT,CAAyBC,cAAzB,EAAyC;AACrC,SAAO;AACHC,IAAAA,IAAI,EAAEL,aADH;AAEHI,IAAAA;AAFG,GAAP;AAIH;;AAED,SAASE,eAAT,CAA0BC,cAA1B,EAA0C;AACtC,SAAO;AACHF,IAAAA,IAAI,EAAEJ,aADH;AAEHM,IAAAA;AAFG,GAAP;AAIH;;AAED,SAASC,aAAT,CAAwBC,YAAxB,EAAsC;AAClC,SAAO;AACHJ,IAAAA,IAAI,EAAEH,WADH;AAEHO,IAAAA;AAFG,GAAP;AAIH;;AAED,OAAO,SAASC,KAAT,CAAeC,QAAf,EAAyBC,QAAzB,EAAmC;AACtC,SAAOC,QAAQ,IAAI;AACfA,IAAAA,QAAQ,CAACV,eAAe,CAAC,IAAD,CAAhB,CAAR;AACAU,IAAAA,QAAQ,CAACC,eAAe,CAAC,KAAD,CAAhB,CAAR;AACAD,IAAAA,QAAQ,CAACE,aAAa,CAAC,KAAD,CAAd,CAAR;AAEAC,IAAAA,gBAAgB,CAACL,QAAD,EAAWC,QAAX,CAAhB,CACKK,IADL,CACUC,OAAO,IAAI;AACbL,MAAAA,QAAQ,CAACV,eAAe,CAAC,KAAD,CAAhB,CAAR;AACAU,MAAAA,QAAQ,CAACC,eAAe,CAAC,IAAD,CAAhB,CAAR;AACH,KAJL,EAKKK,KALL,CAKWC,KAAK,IAAI;AACZP,MAAAA,QAAQ,CAACV,eAAe,CAAC,KAAD,CAAhB,CAAR;AACAU,MAAAA,QAAQ,CAACE,aAAa,CAACK,KAAD,CAAd,CAAR;AACH,KARL;AASH,GAdD;AAeH;AAED;;;AAEA,SAASJ,gBAAT,CAA2BK,KAA3B,EAAkCT,QAAlC,EAA4C;AACxC,SAAO,IAAIU,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACpCC,IAAAA,KAAK,CAAC,qCAAqCJ,KAAtC,EAA6C;AAC9CK,MAAAA,MAAM,EAAE;AADsC,KAA7C,CAAL,CAEGT,IAFH,CAEQU,GAAG,IACPA,GAAG,CAACC,IAAJ,GAAWX,IAAX,CAAgBW,IAAI,IAAI;AACpB,UAAGA,IAAI,CAACC,MAAL,GAAc,CAAjB,EAAoB;AAChB,YAAGD,IAAI,CAAC,CAAD,CAAJ,CAAQE,QAAR,KAAqBlB,QAAxB,EAAkC;AAC9B,iBAAOW,OAAO,CAAC,IAAD,CAAd;AACH;AACJ;;AACD,aAAOC,MAAM,CAAC,IAAIO,KAAJ,CAAU,8BAAV,CAAD,CAAb;AACH,KAPD,CAHJ;AAYH,GAbM,CAAP;AAcH","sourcesContent":["const LOGIN_PENDING = 'LOGIN_PENDING';\r\nconst LOGIN_SUCCESS = 'LOGIN_SUCCESS';\r\nconst LOGIN_ERROR = 'LOGIN_ERROR';\r\n\r\nfunction setLoginPending(isLoginPending) {\r\n    return {\r\n        type: LOGIN_PENDING,\r\n        isLoginPending\r\n    };\r\n}\r\n\r\nfunction SetLoginSuccess (isLoginSuccess) {\r\n    return {\r\n        type: LOGIN_SUCCESS,\r\n        isLoginSuccess\r\n    };\r\n}\r\n\r\nfunction SetLoginError (isLoginError) {\r\n    return {\r\n        type: LOGIN_ERROR,\r\n        isLoginError\r\n    };\r\n}\r\n\r\nexport function login(username, password) {\r\n    return dispatch => {\r\n        dispatch(setLoginPending(true));\r\n        dispatch(setLoginSuccess(false));\r\n        dispatch(setLoginError(false));\r\n\r\n        sendLoginRequest(username, password)\r\n            .then(success => {\r\n                dispatch(setLoginPending(false));\r\n                dispatch(setLoginSuccess(true));\r\n            })\r\n            .catch(error => {\r\n                dispatch(setLoginPending(false));\r\n                dispatch(setLoginError(error));\r\n            })\r\n    }\r\n}\r\n\r\n/* Handles login credential checking for user, checks their email and password within\r\nthe user database and returns whether the login was successful or not. */\r\nfunction sendLoginRequest (email, password) {\r\n    return new Promise((resolve, reject) => {\r\n        fetch('http://localhost:4200/api/users/' + email, {\r\n            method: 'get'\r\n        }).then(res =>\r\n            res.json().then(json => {\r\n                if(json.length > 0) {\r\n                    if(json[0].Password === password) {\r\n                        return resolve(true);\r\n                    }\r\n                }\r\n                return reject(new Error(\"Invalid username or password\"));\r\n            })\r\n        );\r\n    });\r\n}"]},"metadata":{},"sourceType":"module"}